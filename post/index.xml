<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 玖月的博客</title>
    <link>https://gangsusu.github.io/post/</link>
    <description>Recent content in Posts on 玖月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 21 Oct 2021 09:00:00 +0800</lastBuildDate><atom:link href="https://gangsusu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二叉树的层序遍历</title>
      <link>https://gangsusu.github.io/post/2021-10-21-php-tree-node/</link>
      <pubDate>Thu, 21 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-10-21-php-tree-node/</guid>
      <description>leetcode第102题 给你一个二叉树，请你返回按照层序遍历得到的节点值。（即逐层地，从左到右访问所有节点） 示例： 二叉树：[3,9,20,null,null,15,7],
 3/ \9 20/ \15 7返回其层序遍历结果：
[ [3], [9,20], [15,7] ]
&amp;lt;?php /** * Definition for a binary tree node. * class TreeNode { * public $val = null; * public $left = null; * public $right = null; * function __construct($val = 0, $left = null, $right = null) { * $this-&amp;gt;val = $val; * $this-&amp;gt;left = $left; * $this-&amp;gt;right = $right; * } * } */ class Solution { /** * @param TreeNode $root * @return Integer[][] */ function levelOrder($root) { //定义返回值  $res = []; //边界值的处理  if (!</description>
    </item>
    
    <item>
      <title>trait的使用</title>
      <link>https://gangsusu.github.io/post/2021-10-17-php-trait/</link>
      <pubDate>Sun, 17 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-10-17-php-trait/</guid>
      <description>简单介绍 trait是php5.4之后新增的一个功能，可以将某些需要反复使用的代码封装到trait中，以达到代码复用的效果。 它的本质不是类，所以不能被实例化，可以将它理解为一个代码片段，可以引入来进行方法的复用。
简单使用 trait t1 { public $name = &amp;#39;tom&amp;#39;; public function printName() { echo &amp;#39;my name is &amp;#39; . $this-&amp;gt;name . PHP_EOL; } } class c1 { use t1; } $obj = new c1(); $obj-&amp;gt;printName(); // my name is tom 这就是最简单的用法了，定义好一个trait，在需要用的类里使用use来引入，就可以复用trait里的方法了。
use多个trait trait可以解决php单继承的问题，可以use多个trait
trait hello { public function sayHello() { return &amp;#39;hello&amp;#39;; } } trait world { public function sayWorld() { return &amp;#39;world&amp;#39;; } } class helloWorld { use hello, world; } $obj1 = new helloWorld(); var_dump($obj1-&amp;gt;sayHello() .</description>
    </item>
    
    <item>
      <title>laravel宏指令Macro</title>
      <link>https://gangsusu.github.io/post/2021-10-10-larave-macro/</link>
      <pubDate>Mon, 11 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-10-10-larave-macro/</guid>
      <description>简介 在大学学习office的时候，会提到宏指令，它是一种批量处理，根据一系列预定义的规则，作为一个单独命令完成一个特定任务。我们来看一看laravel中的宏指令，它允许你添加自定义功能到laravel的内部组件中去。
扩展collection集合的功能 我们知道，在laravel中可以使用paginate或者simplePaginate来轻松的实现分页，但是，它只是支持针对数据库的查询构建器来使用，在开发中遇到了一个场景，需要对一些统计出来的数据做分页展示，当然我们可以对统计出来的数据集合使用forPage来进行分页数据的截取，但是就不能用paginate的分页用法了，还要手写前端分页样式，干脆扩展一个集合的paginate分页。
扩展的方法为
if (!Collection::hasMacro(&amp;#39;paginate&amp;#39;)) { Collection::macro(&amp;#39;paginate&amp;#39;, function ($path, $perPage = 10, $page = null, $options = []) { $page = $page ?: (Paginator::resolveCurrentPage() ?: 1); $offset = ($page * $perPage) - $perPage; return (new LengthAwarePaginator( $this-&amp;gt;slice($offset, $perPage)-&amp;gt;values(), $this-&amp;gt;count(), $perPage, $page, $options)) -&amp;gt;withPath($path); }); } 使用Collection::macro方法来扩展方法，第一个参数是想要扩展的方法名，第二个参数是一个匿名函数，想要传递的参数，也可以写在匿名函数里，这样就能给Collection扩展一个paginate方法，具体的逻辑是参照paginate的源码做了一定的修改，我们讨论的是怎样使用宏，对实现自定义分页的逻辑就不再展开说了。
方法写好了，要怎样在框架注册呢？最简单的就是直接在AppServiceProvider的boot方法里注册，但是我们可能注册很多不同类型的宏，因为laravel支持扩展宏的类型有很多，那么我们干脆新建一个CollectionMacroServiceProvider来进行所有Collection的宏注册。
&amp;lt;?php namespace App\Providers; use Illuminate\Pagination\LengthAwarePaginator; use Illuminate\Pagination\Paginator; use Illuminate\Support\Collection; use Illuminate\Support\ServiceProvider; class CollectionMacroServiceProvider extends ServiceProvider { public function boot() { if (!</description>
    </item>
    
    <item>
      <title>go数据类型之map</title>
      <link>https://gangsusu.github.io/post/2021-09-30-go-map/</link>
      <pubDate>Fri, 08 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-30-go-map/</guid>
      <description>map的基本介绍 map是go中一种很重要的数据类型，是一种无序的键值对集合。它有一些独特的特点。
遍历时候是无序的 map是一种集合，我们可以来迭代它。但是迭代出来的结果是无序的，它是用hash表来实现的。 按照一些资料显示，map的无序是有意为之，大佬不希望使用者依赖key的排序，来定位value。可自行迭代来验证迭代结果是否是无序的。
并发不安全 map是并发不安全的，不注意这个点，很容易造成bug，如下面的演示，启动了3个线程来调用write方法，下面的代码会报错，提示goroutine running on other thread; stack unavailable
并发不安全的演示 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func write(m map[string]int) { for i := 0; i &amp;lt; 100000; i++ { m[&amp;#34;num&amp;#34;] = i } } func main() { map01 := map[string]int{&amp;#34;num&amp;#34;: 0} go write(map01) go write(map01) go write(map01) time.Sleep(1 * time.Second) fmt.Println(map01) } 使用加锁来保证并发安全 简单处理，可以在执行每个操作的时候加锁，代码如下：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) var Lock sync.RWMutex func write(m map[string]int) { for i := 0; i &amp;lt; 100000; i++ { Lock.</description>
    </item>
    
    <item>
      <title>go中的深拷贝和浅拷贝</title>
      <link>https://gangsusu.github.io/post/2021-09-28-go-copy/</link>
      <pubDate>Tue, 28 Sep 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-28-go-copy/</guid>
      <description>go中的数据类型 在go中，数据类型有很多，int、string、bool、array、slice、map、struct、channel、interface、function等。
代码验证  数组在php中是非常重要的数据类型，在php中是深拷贝，我们先看看go中的数组  array01 := [3]string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} array02 := array01 array01[1] = &amp;#34;B&amp;#34; fmt.Println(array01) // [a B c] 	fmt.Println(array02) // [a b c] go中的数组也是深拷贝。
我们看一看切片slice  slice01 := []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} slice02 := slice01 slice01[1] = &amp;#34;B&amp;#34; fmt.Println(slice01) // [a B c] 	fmt.Println(slice02) // [a B c] 我们可以看到，slice是浅拷贝。
我们可以使用一个copy函数来对slice进行深拷贝  slice03 := []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} slice04 := make([]string, 3, 3) copy(slice04, slice03) slice03[1] = &amp;#34;B&amp;#34; fmt.</description>
    </item>
    
    <item>
      <title>php中的深拷贝和浅拷贝</title>
      <link>https://gangsusu.github.io/post/2021-09-26-php-copy/</link>
      <pubDate>Sun, 26 Sep 2021 13:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-26-php-copy/</guid>
      <description>深拷贝和浅拷贝的通俗理解  深拷贝：在赋值的时候，完全复制，是完全不同的两个值，对其中一个修改，不会影响到另一个。 浅拷贝：在赋值的时候，是引用赋值，对应的是同一个值，对其中一个修改，另一个的值也会随之更改。  在php中，常用的数据数据类型如int和string，是深拷贝，直接复制了一个新的出来，两个值之间互不干涉，这个比较简单，不做赘述。我们来看一下，稍微有点不同的对象类型。
代码验证  首先，我们来看一看最简单的，只包含一个普通属性的情况：  class TestOne { public $data = 11; } $a = new TestOne(); $b = $a; $a-&amp;gt;data = 22; var_dump($a-&amp;gt;data); // 22 var_dump($b-&amp;gt;data); // 22 我们可以看到其中一个值的改变，另一个值也随之改变了，说明了不同于php常见数据类型的深拷贝，这里发生的浅拷贝。
__clone可以复制，我们看看上面的情况用__clone会如何  class TestTwo { public $data = 11; } $c = new TestTwo(); $d = clone $c; $c-&amp;gt;data = 22; var_dump($c-&amp;gt;data); // 22 var_dump($d-&amp;gt;data); // 11 我们可以看到，一个值得改变没有影响到另一个，发生的是深拷贝。
我们看一看更复杂的情况，加上对象属性会怎么样  class Test { public $a = 1; } class TestThree { public $b = 1; public $obj; public function __construct() { $this-&amp;gt;obj = new Test(); } } $e = new TestThree(); $f = $e; $e-&amp;gt;b = 2; $e-&amp;gt;obj-&amp;gt;a = 3; var_dump($e-&amp;gt;b); //2 var_dump($e-&amp;gt;obj-&amp;gt;a); //3 var_dump($f-&amp;gt;b); //2 var_dump($f-&amp;gt;obj-&amp;gt;a); //3 我们可以看到，普通属性和对象属性操作的值都该改变了，说明都发生了浅拷贝，这和TestOne中是一样的。</description>
    </item>
    
    <item>
      <title>你尽力了吗？</title>
      <link>https://gangsusu.github.io/post/2021-09-24-try-hard/</link>
      <pubDate>Fri, 24 Sep 2021 13:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-24-try-hard/</guid>
      <description>来自大佬的灵魂拷问：你尽力了吗？
应该是没有，尽力了应该不会是现在这个样子吧。
但是，还是希望自己能每天进步一点点，再努力努力。
借用程序员诗人子健的歌，来升华一下：
关于明天 愿你坚持不懈
即便前路 是无尽的黑夜
一路向前 沿途美景无边
义无反顾 理想无需多言
再多考验 都会兑换成喜悦
拼搏憧憬 为更美好的明天
特别鸣谢
听从了大佬的指点，才开了这个博客，感谢大佬的帮助和指点。</description>
    </item>
    
  </channel>
</rss>
