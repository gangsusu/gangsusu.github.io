<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on 玖月的博客</title>
    <link>https://gangsusu.github.io/categories/javascript/</link>
    <description>Recent content in javascript on 玖月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 11 Nov 2021 09:00:00 +0800</lastBuildDate><atom:link href="https://gangsusu.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>javascript中的变量提升和函数提升</title>
      <link>https://gangsusu.github.io/post/2021-11-11-javascript-up/</link>
      <pubDate>Thu, 11 Nov 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-11-11-javascript-up/</guid>
      <description>变量提升 console.log(a); //undefined var a = 10; console.log(a); //10 为什么在变量之前打印出来是undefined，而在之后是10呢？其实真正执行是按下面的步骤执行的：
var a //首先会检查该作用域中有没有变量，如果有，就提升到作用域的顶部来 console.log(a); //当此时打印的时候，a已经存在了，但是没有赋值，所以是undefined a = 10 //此时给a赋值 console.log(a) //a已经赋值为10，所以打印是10 使用var定义变量的时候，js解释器会将变量提升到该作用域的最顶部，这就是变量提升 看下一个例子：
var a = 10; functin foo(){ console.log(a); //undefined  var a = 10; console.log(a); //10 } foo(); 同样，我们来解析一下执行过程
var a; //变量提升 a = 10; //赋值 function foo(){ var a; //变量提升  console.log(a); //undefined  a = 10; console.log(a); //10 } foo(); 在函数里面形成了函数作用域，只要里面存在变量，就会提升到函数内部的顶端。
再看下面一个例子：
console.log(a);//报错，a is not defined a = 10; 这是因为a是直接赋值的，并没有通过var来声明，所以并不会进行变量提升，即：只有var定义的变量才存在变量提升。</description>
    </item>
    
  </channel>
</rss>
