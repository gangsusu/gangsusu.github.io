<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 玖月的博客</title>
    <link>https://gangsusu.github.io/categories/golang/</link>
    <description>Recent content in golang on 玖月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 08 Nov 2021 09:00:00 +0800</lastBuildDate><atom:link href="https://gangsusu.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang中的类型断言</title>
      <link>https://gangsusu.github.io/post/2021-11-08-go-type-assert/</link>
      <pubDate>Mon, 08 Nov 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-11-08-go-type-assert/</guid>
      <description>类型断言是一个使用在接口值上的操作。
有时候，我们可能需要知道某个接口类型的实际类型，比如某个方法需要接收多种类型的数据，并需要做分别处理，我们可以把形参设置为空接口类型并接收任意类型的值，但是我们怎么反向知道里面实际保存的哪个类型的对象呢？ 我们就可以利用断言。 语法是x.(T)，x表示一个接口类型的值，T表示一个类型，该断言表达式会返回x的值和一个布尔值，可根据该布尔值判断x是否是T类型。
简单使用 package main import &amp;#34;fmt&amp;#34; func main() { var x interface{} var b float32 = 3.14 x = b //空接口可以用来接受任意值 	// 	//y := x.(float64) 	//fmt.Printf(&amp;#34;type是 %T,值是%v&amp;#34;, y, y)  y1 := x.(float32) fmt.Printf(&amp;#34;type是 %T,值是%v&amp;#34;, y1, y1) } 在注释的代码里，断言类型是flout64，因为非flout64类型，会报一个panic错误。可以如下所示，在返回值加上布尔返回值。
添加布尔返回值 package main import &amp;#34;fmt&amp;#34; func main() { var x interface{} var b float32 = 3.14 x = b //空接口可以用来接受任意值  if y, ok := x.</description>
    </item>
    
    <item>
      <title>golang的atomtic原子操作</title>
      <link>https://gangsusu.github.io/post/2021-10-22-go-atomtic/</link>
      <pubDate>Fri, 22 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-10-22-go-atomtic/</guid>
      <description>简介 原子操作，即是进行过程概念中不能被中断的操作。也就是说，针对某个值的原子操作在被进行的过程当中，CPU不会再去进行其他的针对该值的操作。 为了实现这样的严谨性，原子操作仅会由一个独立的CPU指令代表和完成。
在golang中的sync/atomic包中，提供了对数据的原子性操作。在之前介绍map的并发不安全的时候，我们曾经使用过sync包中的读写锁，atomic是sync包的一个子包。 它提供了6种可操作类型：int32,uint32,int64,uint64,uintptr,unsafe.Pinter。 每一种类型又分别提供了5种操作：Add增减，CampareAndSwap比较并交换，Swap交换，Load载入，Store存储。
1.增或减 func AddInt32(addr *int32, delta int32) (new int32)func AddUint32(addr *uint32, delta uint32) (new uint32)func AddInt64(addr *int64, delta int64) (new int64)func AddUint64(addr *uint64, delta uint64) (new uint64)func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)原子增减的函数都是以Add开头，需要注意的是，第一个参数是需要加减的变量，是一个指针类型。 第二个参数是加减的数，不过由于uint32和uint64是无符号数，所以无法传递一个负数，来达到减操作的目的。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;sync/atomic&amp;#34; ) var total int64 func worker(wg *sync.WaitGroup) { defer wg.Done() var i int64 for i = 0; i &amp;lt;= 100; i++ { atomic.</description>
    </item>
    
    <item>
      <title>go数据类型之map</title>
      <link>https://gangsusu.github.io/post/2021-09-30-go-map/</link>
      <pubDate>Fri, 08 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-30-go-map/</guid>
      <description>map的基本介绍 map是go中一种很重要的数据类型，是一种无序的键值对集合。它有一些独特的特点。
遍历时候是无序的 map是一种集合，我们可以来迭代它。但是迭代出来的结果是无序的，它是用hash表来实现的。 按照一些资料显示，map的无序是有意为之，大佬不希望使用者依赖key的排序，来定位value。可自行迭代来验证迭代结果是否是无序的。
并发不安全 map是并发不安全的，不注意这个点，很容易造成bug，如下面的演示，启动了3个线程来调用write方法，下面的代码会报错，提示goroutine running on other thread; stack unavailable
并发不安全的演示 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func write(m map[string]int) { for i := 0; i &amp;lt; 100000; i++ { m[&amp;#34;num&amp;#34;] = i } } func main() { map01 := map[string]int{&amp;#34;num&amp;#34;: 0} go write(map01) go write(map01) go write(map01) time.Sleep(1 * time.Second) fmt.Println(map01) } 使用加锁来保证并发安全 简单处理，可以在执行每个操作的时候加锁，代码如下：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) var Lock sync.RWMutex func write(m map[string]int) { for i := 0; i &amp;lt; 100000; i++ { Lock.</description>
    </item>
    
    <item>
      <title>go中的深拷贝和浅拷贝</title>
      <link>https://gangsusu.github.io/post/2021-09-28-go-copy/</link>
      <pubDate>Tue, 28 Sep 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-28-go-copy/</guid>
      <description>go中的数据类型 在go中，数据类型有很多，int、string、bool、array、slice、map、struct、channel、interface、function等。
代码验证  数组在php中是非常重要的数据类型，在php中是深拷贝，我们先看看go中的数组  array01 := [3]string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} array02 := array01 array01[1] = &amp;#34;B&amp;#34; fmt.Println(array01) // [a B c] 	fmt.Println(array02) // [a b c] go中的数组也是深拷贝。
我们看一看切片slice  slice01 := []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} slice02 := slice01 slice01[1] = &amp;#34;B&amp;#34; fmt.Println(slice01) // [a B c] 	fmt.Println(slice02) // [a B c] 我们可以看到，slice是浅拷贝。
我们可以使用一个copy函数来对slice进行深拷贝  slice03 := []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} slice04 := make([]string, 3, 3) copy(slice04, slice03) slice03[1] = &amp;#34;B&amp;#34; fmt.</description>
    </item>
    
  </channel>
</rss>
