<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on 玖月的博客</title>
    <link>https://gangsusu.github.io/categories/leetcode/</link>
    <description>Recent content in leetcode on 玖月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 28 Oct 2021 09:00:00 +0800</lastBuildDate><atom:link href="https://gangsusu.github.io/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数组中数字出现的次数</title>
      <link>https://gangsusu.github.io/post/2021-10-28-php-single-number/</link>
      <pubDate>Thu, 28 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-10-28-php-single-number/</guid>
      <description>题目 https://link.juejin.cn/?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fshu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof%2F
一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。 示例1：
输入：nums = [4,1,4,6]输出：[1,6] 或 [6,1]示例2：
输入：nums = [1,2,10,4,1,4,3,3]输出：[2,10] 或 [10,2]我们先看一下位运算的基础知识：
$a &amp;amp; $b 按位与 将$a和$b中都为1的位设为1$ | $b 按位或 将$a和$b中任何一个为1的位设为1$ ^ $b 按位异或 将$a和$b中一个为1另一个为0的位设为1~ $a 按位取反 将$a中为0的位设为1，为1的位设为0$a &amp;lt;&amp;lt; $b 左移 将$a中的位向左移动$b次，每移动一次都表示乘以2$a &amp;gt;&amp;gt; $b 右移 将$a中的位向右移动$b次，每移动一次都表示除以2位移在 PHP 中是数学运算。向任何方向移出去的位都被丢弃。左移时右侧以零填充，符号位被移走意味着正负号不被保留。右移时左侧以符号位填充，意味着正负号被保留。
按位异或有几个特点：a^a = 0, a^0 = a, a^b^a = b,所以，如果我们题目中是只有一个数字是重复一次的，很简单，所有元素异或一遍就得到了这个值。
假如我们能够将数组分成两种： 1.只出现一次的两个元素分到不同的组 2.相同元素的值分到相同的组中。 那么每个组就能用异或的特点，分组异或就找到个自己组中的唯一值。
&amp;lt;?php $arr = [5, 6, 5, 6, 10, 11, 11, 9]; $ret = 0; foreach ($arr as $v) { $ret ^= $v; } $h = 1; while (($h &amp;amp; $ret) == 0) { $h &amp;lt;&amp;lt;= 1; } $a = $b = 0; foreach ($arr as $val) { if (($h &amp;amp; $val) == 0) { $a ^= $val; } else { $b ^= $val; } } print_r([$a, $b]); 这里会有个容易踩的坑，&amp;amp;和==的优先级问题，==的优先级是高于&amp;amp;的所以，需要加括号先&amp;amp;之后把结果再和0进行比较。</description>
    </item>
    
    <item>
      <title>二叉树的层序遍历</title>
      <link>https://gangsusu.github.io/post/2021-10-21-php-tree-node/</link>
      <pubDate>Thu, 21 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-10-21-php-tree-node/</guid>
      <description>leetcode第102题 给你一个二叉树，请你返回按照层序遍历得到的节点值。（即逐层地，从左到右访问所有节点） 示例： 二叉树：[3,9,20,null,null,15,7],
 3/ \9 20/ \15 7返回其层序遍历结果：
[ [3], [9,20], [15,7] ]
&amp;lt;?php /** * Definition for a binary tree node. * class TreeNode { * public $val = null; * public $left = null; * public $right = null; * function __construct($val = 0, $left = null, $right = null) { * $this-&amp;gt;val = $val; * $this-&amp;gt;left = $left; * $this-&amp;gt;right = $right; * } * } */ class Solution { /** * @param TreeNode $root * @return Integer[][] */ function levelOrder($root) { //定义返回值  $res = []; //边界值的处理  if (!</description>
    </item>
    
  </channel>
</rss>
