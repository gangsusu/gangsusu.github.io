<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>玖月的博客</title>
    <link>https://gangsusu.github.io/</link>
    <description>Recent content on 玖月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 28 Sep 2021 09:00:00 +0800</lastBuildDate><atom:link href="https://gangsusu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go中的深拷贝和浅拷贝</title>
      <link>https://gangsusu.github.io/post/2021-09-28-go-copy/</link>
      <pubDate>Tue, 28 Sep 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-28-go-copy/</guid>
      <description>go中的数据类型 在go中，数据类型有很多，int、string、bool、array、slice、map、struct、channel、interface、function等。
代码验证  数组在php中是非常重要的数据类型，在php中是深拷贝，我们先看看go中的数组  array01 := [3]string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} array02 := array01 array01[1] = &amp;#34;B&amp;#34; fmt.Println(array01) // [a B c] 	fmt.Println(array02) // [a b c] go中的数组也是深拷贝。
我们看一看切片slice  slice01 := []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} slice02 := slice01 slice01[1] = &amp;#34;B&amp;#34; fmt.Println(slice01) // [a B c] 	fmt.Println(slice02) // [a B c] 我们可以看到，slice是浅拷贝。
我们可以使用一个copy函数来对slice进行深拷贝  slice03 := []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} slice04 := make([]string, 3, 3) copy(slice04, slice03) slice03[1] = &amp;#34;B&amp;#34; fmt.</description>
    </item>
    
    <item>
      <title>php中的深拷贝和浅拷贝</title>
      <link>https://gangsusu.github.io/post/2021-09-26-php-copy/</link>
      <pubDate>Sun, 26 Sep 2021 13:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-26-php-copy/</guid>
      <description>深拷贝和浅拷贝的通俗理解  深拷贝：在赋值的时候，完全复制，是完全不同的两个值，对其中一个修改，不会影响到另一个。 浅拷贝：在赋值的时候，是引用赋值，对应的是同一个值，对其中一个修改，另一个的值也会随之更改。  在php中，常用的数据数据类型如int和string，是深拷贝，直接复制了一个新的出来，两个值之间互不干涉，这个比较简单，不做赘述。我们来看一下，稍微有点不同的对象类型。
代码验证  首先，我们来看一看最简单的，只包含一个普通属性的情况：  class TestOne { public $data = 11; } $a = new TestOne(); $b = $a; $a-&amp;gt;data = 22; var_dump($a-&amp;gt;data); // 22 var_dump($b-&amp;gt;data); // 22 我们可以看到其中一个值的改变，另一个值也随之改变了，说明了不同于php常见数据类型的深拷贝，这里发生的浅拷贝。
__clone可以复制，我们看看上面的情况用__clone会如何  class TestTwo { public $data = 11; } $c = new TestTwo(); $d = clone $c; $c-&amp;gt;data = 22; var_dump($c-&amp;gt;data); // 22 var_dump($d-&amp;gt;data); // 11 我们可以看到，一个值得改变没有影响到另一个，发生的是深拷贝。
我们看一看更复杂的情况，加上对象属性会怎么样  class Test { public $a = 1; } class TestThree { public $b = 1; public $obj; public function __construct() { $this-&amp;gt;obj = new Test(); } } $e = new TestThree(); $f = $e; $e-&amp;gt;b = 2; $e-&amp;gt;obj-&amp;gt;a = 3; var_dump($e-&amp;gt;b); //2 var_dump($e-&amp;gt;obj-&amp;gt;a); //3 var_dump($f-&amp;gt;b); //2 var_dump($f-&amp;gt;obj-&amp;gt;a); //3 我们可以看到，普通属性和对象属性操作的值都该改变了，说明都发生了浅拷贝，这和TestOne中是一样的。</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://gangsusu.github.io/about/</link>
      <pubDate>Sun, 26 Sep 2021 00:13:27 +0000</pubDate>
      
      <guid>https://gangsusu.github.io/about/</guid>
      <description>A developer.</description>
    </item>
    
    <item>
      <title>你尽力了吗？</title>
      <link>https://gangsusu.github.io/post/2021-09-24-try-hard/</link>
      <pubDate>Fri, 24 Sep 2021 13:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-24-try-hard/</guid>
      <description>来自大佬的灵魂拷问：你尽力了吗？
应该是没有，尽力了应该不会是现在这个样子吧。
但是，还是希望自己能每天进步一点点，再努力努力。
借用程序员诗人子健的歌，来升华一下：
关于明天 愿你坚持不懈
即便前路 是无尽的黑夜
一路向前 沿途美景无边
义无反顾 理想无需多言
再多考验 都会兑换成喜悦
拼搏憧憬 为更美好的明天
特别鸣谢
听从了大佬的指点，才开了这个博客，感谢大佬的帮助和指点。</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://gangsusu.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gangsusu.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://gangsusu.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gangsusu.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
