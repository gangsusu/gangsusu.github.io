<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>玖月的博客</title>
    <link>https://gangsusu.github.io/</link>
    <description>Recent content on 玖月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 19 Nov 2021 09:00:00 +0800</lastBuildDate><atom:link href="https://gangsusu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>redis中的bitmap</title>
      <link>https://gangsusu.github.io/post/2021-11-19-redis-bitmap/</link>
      <pubDate>Fri, 19 Nov 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-11-19-redis-bitmap/</guid>
      <description>前言 bitmap，即位图，是一连串的二进制数组，可以同通过偏移量来定位元素。 bit是计算机中最小的单位，使用它来存储一些特殊的数据将会非常节省空间，特别适合一些数据量大，并且使用二值统计的场景。 这里的二值状态就是指集合元素的取值只有0和1两种。例如在签到中，我们就可以用0和1分别代表未签到和已签到。统计每个月的签到，只需要31个bit, 一年的值，只需要365个bit。
bitmap在redis中并不是一种基本的数据类型，而是基于string类型进行的位操作。redis中字符串的最大长度是512M，所以bitmap的偏移量也是有上限的， 它的最大值就是8 * 1024 * 1024 * 512 = 2^32。
简单使用 1. setbit  语法为： setbit key offset value 时间复杂度：O(1)  假如我们想要记录userId是10086的用户在2021年11月的签到数据，我们就可以使用setbit userid:10086:202111 0 1,用偏移量表示日，因为从0开始， 我们就用0表示1号，1表示2号，依次类推，value的0和1表示未签到和已经签到，那么setbit userid:10086:202111 0 1就记录了该用户在11月1号已签到。 bitmap是基于string的，我们可以用strlen来查看长度，可以自行试一下，setbit了1到8个值的时候，长度都是1，当再插入一个值的时候，长度就会变为2。
2. getbit  语法为：getbit key offset 时间复杂度：O(1)  我们想要获取2021年11月3号该用户是否签到，就可以用getbit userid:10086:202111 2,需要注意的是，我们从0开始保存，所以日要减去1。
3. bitcount  语法为：bitcount key [start end] 时间复杂度：O(N) 返回值是一个整数：是值为1的个数 start和end是指定的字节范围，而不是偏移量。 start和end可以是负数，-1表示最后一个字节，-2表示倒数第二个字节，依次类推。 key不存在，返回0  假如我们需要统计该用户11月一共签到了多少天，就可以用bitcount userid:10086:202111，不加可选参数，就可以获取了。
4. bitpos  语法为：bitpos key bit [start [end]] 时间复杂度：O(N) 返回值是整数，返回比特值是指定bit(0或者1)的偏移量 start和end是指定的字节范围，而不是偏移量。这个和bitcount里是一样的。 start和end可以是负数，-1表示最后一个字节，-2表示倒数第二个字节，依次类推。同bitcount 如果值全部是1，但是指定的bit是0，那么此时返回的值是最大的偏移量offset+1 如果查询的bit是1，查询不到就返回-1  我们可以用来统计在2021年11月该用户首次签到的时间，使用bitpos userid:10086:202111,如果返回值是3，就表示是首次签到的时间是4号。</description>
    </item>
    
    <item>
      <title>javascript中的变量提升和函数提升</title>
      <link>https://gangsusu.github.io/post/2021-11-11-javascript-up/</link>
      <pubDate>Thu, 11 Nov 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-11-11-javascript-up/</guid>
      <description>变量提升 console.log(a); //undefined var a = 10; console.log(a); //10 为什么在变量之前打印出来是undefined，而在之后是10呢？其实真正执行是按下面的步骤执行的：
var a //首先会检查该作用域中有没有变量，如果有，就提升到作用域的顶部来 console.log(a); //当此时打印的时候，a已经存在了，但是没有赋值，所以是undefined a = 10 //此时给a赋值 console.log(a) //a已经赋值为10，所以打印是10 使用var定义变量的时候，js解释器会将变量提升到该作用域的最顶部，这就是变量提升 看下一个例子：
var a = 10; functin foo(){ console.log(a); //undefined  var a = 10; console.log(a); //10 } foo(); 同样，我们来解析一下执行过程
var a; //变量提升 a = 10; //赋值 function foo(){ var a; //变量提升  console.log(a); //undefined  a = 10; console.log(a); //10 } foo(); 在函数里面形成了函数作用域，只要里面存在变量，就会提升到函数内部的顶端。
再看下面一个例子：
console.log(a);//报错，a is not defined a = 10; 这是因为a是直接赋值的，并没有通过var来声明，所以并不会进行变量提升，即：只有var定义的变量才存在变量提升。</description>
    </item>
    
    <item>
      <title>golang中的类型断言</title>
      <link>https://gangsusu.github.io/post/2021-11-08-go-type-assert/</link>
      <pubDate>Mon, 08 Nov 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-11-08-go-type-assert/</guid>
      <description>类型断言是一个使用在接口值上的操作。
有时候，我们可能需要知道某个接口类型的实际类型，比如某个方法需要接收多种类型的数据，并需要做分别处理，我们可以把形参设置为空接口类型并接收任意类型的值，但是我们怎么反向知道里面实际保存的哪个类型的对象呢？ 我们就可以利用断言。 语法是x.(T)，x表示一个接口类型的值，T表示一个类型，该断言表达式会返回x的值和一个布尔值，可根据该布尔值判断x是否是T类型。
简单使用 package main import &amp;#34;fmt&amp;#34; func main() { var x interface{} var b float32 = 3.14 x = b //空接口可以用来接受任意值 	// 	//y := x.(float64) 	//fmt.Printf(&amp;#34;type是 %T,值是%v&amp;#34;, y, y)  y1 := x.(float32) fmt.Printf(&amp;#34;type是 %T,值是%v&amp;#34;, y1, y1) } 在注释的代码里，断言类型是flout64，因为非flout64类型，会报一个panic错误。可以如下所示，在返回值加上布尔返回值。
添加布尔返回值 package main import &amp;#34;fmt&amp;#34; func main() { var x interface{} var b float32 = 3.14 x = b //空接口可以用来接受任意值  if y, ok := x.</description>
    </item>
    
    <item>
      <title>数组中数字出现的次数</title>
      <link>https://gangsusu.github.io/post/2021-10-28-php-single-number/</link>
      <pubDate>Thu, 28 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-10-28-php-single-number/</guid>
      <description>题目 https://link.juejin.cn/?target=https%3A%2F%2Fleetcode-cn.com%2Fproblems%2Fshu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof%2F
一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。 示例1：
输入：nums = [4,1,4,6]输出：[1,6] 或 [6,1]示例2：
输入：nums = [1,2,10,4,1,4,3,3]输出：[2,10] 或 [10,2]我们先看一下位运算的基础知识：
$a &amp;amp; $b 按位与 将$a和$b中都为1的位设为1$ | $b 按位或 将$a和$b中任何一个为1的位设为1$ ^ $b 按位异或 将$a和$b中一个为1另一个为0的位设为1~ $a 按位取反 将$a中为0的位设为1，为1的位设为0$a &amp;lt;&amp;lt; $b 左移 将$a中的位向左移动$b次，每移动一次都表示乘以2$a &amp;gt;&amp;gt; $b 右移 将$a中的位向右移动$b次，每移动一次都表示除以2位移在 PHP 中是数学运算。向任何方向移出去的位都被丢弃。左移时右侧以零填充，符号位被移走意味着正负号不被保留。右移时左侧以符号位填充，意味着正负号被保留。
按位异或有几个特点：a^a = 0, a^0 = a, a^b^a = b,所以，如果我们题目中是只有一个数字是重复一次的，很简单，所有元素异或一遍就得到了这个值。
假如我们能够将数组分成两种： 1.只出现一次的两个元素分到不同的组 2.相同元素的值分到相同的组中。 那么每个组就能用异或的特点，分组异或就找到个自己组中的唯一值。
&amp;lt;?php $arr = [5, 6, 5, 6, 10, 11, 11, 9]; $ret = 0; foreach ($arr as $v) { $ret ^= $v; } $h = 1; while (($h &amp;amp; $ret) == 0) { $h &amp;lt;&amp;lt;= 1; } $a = $b = 0; foreach ($arr as $val) { if (($h &amp;amp; $val) == 0) { $a ^= $val; } else { $b ^= $val; } } print_r([$a, $b]); 这里会有个容易踩的坑，&amp;amp;和==的优先级问题，==的优先级是高于&amp;amp;的所以，需要加括号先&amp;amp;之后把结果再和0进行比较。</description>
    </item>
    
    <item>
      <title>golang的atomtic原子操作</title>
      <link>https://gangsusu.github.io/post/2021-10-22-go-atomtic/</link>
      <pubDate>Fri, 22 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-10-22-go-atomtic/</guid>
      <description>简介 原子操作，即是进行过程概念中不能被中断的操作。也就是说，针对某个值的原子操作在被进行的过程当中，CPU不会再去进行其他的针对该值的操作。 为了实现这样的严谨性，原子操作仅会由一个独立的CPU指令代表和完成。
在golang中的sync/atomic包中，提供了对数据的原子性操作。在之前介绍map的并发不安全的时候，我们曾经使用过sync包中的读写锁，atomic是sync包的一个子包。 它提供了6种可操作类型：int32,uint32,int64,uint64,uintptr,unsafe.Pinter。 每一种类型又分别提供了5种操作：Add增减，CampareAndSwap比较并交换，Swap交换，Load载入，Store存储。
1.增或减 func AddInt32(addr *int32, delta int32) (new int32)func AddUint32(addr *uint32, delta uint32) (new uint32)func AddInt64(addr *int64, delta int64) (new int64)func AddUint64(addr *uint64, delta uint64) (new uint64)func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)原子增减的函数都是以Add开头，需要注意的是，第一个参数是需要加减的变量，是一个指针类型。 第二个参数是加减的数，不过由于uint32和uint64是无符号数，所以无法传递一个负数，来达到减操作的目的。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;sync/atomic&amp;#34; ) var total int64 func worker(wg *sync.WaitGroup) { defer wg.Done() var i int64 for i = 0; i &amp;lt;= 100; i++ { atomic.</description>
    </item>
    
    <item>
      <title>二叉树的层序遍历</title>
      <link>https://gangsusu.github.io/post/2021-10-21-php-tree-node/</link>
      <pubDate>Thu, 21 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-10-21-php-tree-node/</guid>
      <description>leetcode第102题 给你一个二叉树，请你返回按照层序遍历得到的节点值。（即逐层地，从左到右访问所有节点） 示例： 二叉树：[3,9,20,null,null,15,7],
 3/ \9 20/ \15 7返回其层序遍历结果：
[ [3], [9,20], [15,7] ]
&amp;lt;?php /** * Definition for a binary tree node. * class TreeNode { * public $val = null; * public $left = null; * public $right = null; * function __construct($val = 0, $left = null, $right = null) { * $this-&amp;gt;val = $val; * $this-&amp;gt;left = $left; * $this-&amp;gt;right = $right; * } * } */ class Solution { /** * @param TreeNode $root * @return Integer[][] */ function levelOrder($root) { //定义返回值  $res = []; //边界值的处理  if (!</description>
    </item>
    
    <item>
      <title>trait的使用</title>
      <link>https://gangsusu.github.io/post/2021-10-17-php-trait/</link>
      <pubDate>Sun, 17 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-10-17-php-trait/</guid>
      <description>简单介绍 trait是php5.4之后新增的一个功能，可以将某些需要反复使用的代码封装到trait中，以达到代码复用的效果。 它的本质不是类，所以不能被实例化，可以将它理解为一个代码片段，可以引入来进行方法的复用。
简单使用 trait t1 { public $name = &amp;#39;tom&amp;#39;; public function printName() { echo &amp;#39;my name is &amp;#39; . $this-&amp;gt;name . PHP_EOL; } } class c1 { use t1; } $obj = new c1(); $obj-&amp;gt;printName(); // my name is tom 这就是最简单的用法了，定义好一个trait，在需要用的类里使用use来引入，就可以复用trait里的方法了。
use多个trait trait可以解决php单继承的问题，可以use多个trait
trait hello { public function sayHello() { return &amp;#39;hello&amp;#39;; } } trait world { public function sayWorld() { return &amp;#39;world&amp;#39;; } } class helloWorld { use hello, world; } $obj1 = new helloWorld(); var_dump($obj1-&amp;gt;sayHello() .</description>
    </item>
    
    <item>
      <title>laravel宏指令Macro</title>
      <link>https://gangsusu.github.io/post/2021-10-10-larave-macro/</link>
      <pubDate>Mon, 11 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-10-10-larave-macro/</guid>
      <description>简介 在大学学习office的时候，会提到宏指令，它是一种批量处理，根据一系列预定义的规则，作为一个单独命令完成一个特定任务。我们来看一看laravel中的宏指令，它允许你添加自定义功能到laravel的内部组件中去。
扩展collection集合的功能 我们知道，在laravel中可以使用paginate或者simplePaginate来轻松的实现分页，但是，它只是支持针对数据库的查询构建器来使用，在开发中遇到了一个场景，需要对一些统计出来的数据做分页展示，当然我们可以对统计出来的数据集合使用forPage来进行分页数据的截取，但是就不能用paginate的分页用法了，还要手写前端分页样式，干脆扩展一个集合的paginate分页。
扩展的方法为
if (!Collection::hasMacro(&amp;#39;paginate&amp;#39;)) { Collection::macro(&amp;#39;paginate&amp;#39;, function ($path, $perPage = 10, $page = null, $options = []) { $page = $page ?: (Paginator::resolveCurrentPage() ?: 1); $offset = ($page * $perPage) - $perPage; return (new LengthAwarePaginator( $this-&amp;gt;slice($offset, $perPage)-&amp;gt;values(), $this-&amp;gt;count(), $perPage, $page, $options)) -&amp;gt;withPath($path); }); } 使用Collection::macro方法来扩展方法，第一个参数是想要扩展的方法名，第二个参数是一个匿名函数，想要传递的参数，也可以写在匿名函数里，这样就能给Collection扩展一个paginate方法，具体的逻辑是参照paginate的源码做了一定的修改，我们讨论的是怎样使用宏，对实现自定义分页的逻辑就不再展开说了。
方法写好了，要怎样在框架注册呢？最简单的就是直接在AppServiceProvider的boot方法里注册，但是我们可能注册很多不同类型的宏，因为laravel支持扩展宏的类型有很多，那么我们干脆新建一个CollectionMacroServiceProvider来进行所有Collection的宏注册。
&amp;lt;?php namespace App\Providers; use Illuminate\Pagination\LengthAwarePaginator; use Illuminate\Pagination\Paginator; use Illuminate\Support\Collection; use Illuminate\Support\ServiceProvider; class CollectionMacroServiceProvider extends ServiceProvider { public function boot() { if (!</description>
    </item>
    
    <item>
      <title>go数据类型之map</title>
      <link>https://gangsusu.github.io/post/2021-09-30-go-map/</link>
      <pubDate>Fri, 08 Oct 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-30-go-map/</guid>
      <description>map的基本介绍 map是go中一种很重要的数据类型，是一种无序的键值对集合。它有一些独特的特点。
遍历时候是无序的 map是一种集合，我们可以来迭代它。但是迭代出来的结果是无序的，它是用hash表来实现的。 按照一些资料显示，map的无序是有意为之，大佬不希望使用者依赖key的排序，来定位value。可自行迭代来验证迭代结果是否是无序的。
并发不安全 map是并发不安全的，不注意这个点，很容易造成bug，如下面的演示，启动了3个线程来调用write方法，下面的代码会报错，提示goroutine running on other thread; stack unavailable
并发不安全的演示 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func write(m map[string]int) { for i := 0; i &amp;lt; 100000; i++ { m[&amp;#34;num&amp;#34;] = i } } func main() { map01 := map[string]int{&amp;#34;num&amp;#34;: 0} go write(map01) go write(map01) go write(map01) time.Sleep(1 * time.Second) fmt.Println(map01) } 使用加锁来保证并发安全 简单处理，可以在执行每个操作的时候加锁，代码如下：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) var Lock sync.RWMutex func write(m map[string]int) { for i := 0; i &amp;lt; 100000; i++ { Lock.</description>
    </item>
    
    <item>
      <title>go中的深拷贝和浅拷贝</title>
      <link>https://gangsusu.github.io/post/2021-09-28-go-copy/</link>
      <pubDate>Tue, 28 Sep 2021 09:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-28-go-copy/</guid>
      <description>go中的数据类型 在go中，数据类型有很多，int、string、bool、array、slice、map、struct、channel、interface、function等。
代码验证  数组在php中是非常重要的数据类型，在php中是深拷贝，我们先看看go中的数组  array01 := [3]string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} array02 := array01 array01[1] = &amp;#34;B&amp;#34; fmt.Println(array01) // [a B c] 	fmt.Println(array02) // [a b c] go中的数组也是深拷贝。
我们看一看切片slice  slice01 := []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} slice02 := slice01 slice01[1] = &amp;#34;B&amp;#34; fmt.Println(slice01) // [a B c] 	fmt.Println(slice02) // [a B c] 我们可以看到，slice是浅拷贝。
我们可以使用一个copy函数来对slice进行深拷贝  slice03 := []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} slice04 := make([]string, 3, 3) copy(slice04, slice03) slice03[1] = &amp;#34;B&amp;#34; fmt.</description>
    </item>
    
    <item>
      <title>php中的深拷贝和浅拷贝</title>
      <link>https://gangsusu.github.io/post/2021-09-26-php-copy/</link>
      <pubDate>Sun, 26 Sep 2021 13:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-26-php-copy/</guid>
      <description>深拷贝和浅拷贝的通俗理解  深拷贝：在赋值的时候，完全复制，是完全不同的两个值，对其中一个修改，不会影响到另一个。 浅拷贝：在赋值的时候，是引用赋值，对应的是同一个值，对其中一个修改，另一个的值也会随之更改。  在php中，常用的数据数据类型如int和string，是深拷贝，直接复制了一个新的出来，两个值之间互不干涉，这个比较简单，不做赘述。我们来看一下，稍微有点不同的对象类型。
代码验证  首先，我们来看一看最简单的，只包含一个普通属性的情况：  class TestOne { public $data = 11; } $a = new TestOne(); $b = $a; $a-&amp;gt;data = 22; var_dump($a-&amp;gt;data); // 22 var_dump($b-&amp;gt;data); // 22 我们可以看到其中一个值的改变，另一个值也随之改变了，说明了不同于php常见数据类型的深拷贝，这里发生的浅拷贝。
__clone可以复制，我们看看上面的情况用__clone会如何  class TestTwo { public $data = 11; } $c = new TestTwo(); $d = clone $c; $c-&amp;gt;data = 22; var_dump($c-&amp;gt;data); // 22 var_dump($d-&amp;gt;data); // 11 我们可以看到，一个值得改变没有影响到另一个，发生的是深拷贝。
我们看一看更复杂的情况，加上对象属性会怎么样  class Test { public $a = 1; } class TestThree { public $b = 1; public $obj; public function __construct() { $this-&amp;gt;obj = new Test(); } } $e = new TestThree(); $f = $e; $e-&amp;gt;b = 2; $e-&amp;gt;obj-&amp;gt;a = 3; var_dump($e-&amp;gt;b); //2 var_dump($e-&amp;gt;obj-&amp;gt;a); //3 var_dump($f-&amp;gt;b); //2 var_dump($f-&amp;gt;obj-&amp;gt;a); //3 我们可以看到，普通属性和对象属性操作的值都该改变了，说明都发生了浅拷贝，这和TestOne中是一样的。</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://gangsusu.github.io/about/</link>
      <pubDate>Sun, 26 Sep 2021 00:13:27 +0000</pubDate>
      
      <guid>https://gangsusu.github.io/about/</guid>
      <description>A developer.</description>
    </item>
    
    <item>
      <title>你尽力了吗？</title>
      <link>https://gangsusu.github.io/post/2021-09-24-try-hard/</link>
      <pubDate>Fri, 24 Sep 2021 13:00:00 +0800</pubDate>
      
      <guid>https://gangsusu.github.io/post/2021-09-24-try-hard/</guid>
      <description>来自大佬的灵魂拷问：你尽力了吗？
应该是没有，尽力了应该不会是现在这个样子吧。
但是，还是希望自己能每天进步一点点，再努力努力。
借用程序员诗人子健的歌，来升华一下：
关于明天 愿你坚持不懈
即便前路 是无尽的黑夜
一路向前 沿途美景无边
义无反顾 理想无需多言
再多考验 都会兑换成喜悦
拼搏憧憬 为更美好的明天
特别鸣谢
听从了大佬的指点，才开了这个博客，感谢大佬的帮助和指点。</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://gangsusu.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gangsusu.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://gangsusu.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gangsusu.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
